// Package buz provides functions to compute hashes for a byte slice.
package buz

// The table with the random hash values is generated by buzgen. Usually
// that is not necessary.
//go:generate buzgen table.go

// Hash is slice storing the has value for lengths 2, 3, ..., len(data)
// in a slice.
type Hash []uint32

// MakeHash generates the hash slice. Note that index 0 stores the hash
// value for 2 bytes of data.
func MakeHash(n int) Hash {
	if n < 2 {
		return nil
	}
	return make(Hash, n-1)
}

// Returns the data length for the slice.
func (h Hash) DataLen() int {
	return len(h) + 1
}

// Computes the hash values. It returns the number of entries valid
// after the update. The argument p might be shorter than the hash
// value.
func (h Hash) Compute(data []byte) int {
	if len(data) < 2 {
		return 0
	}
	n := len(h) + 1
	if n < len(data) {
		data = data[:n]
	}
	g := table[data[0]]
	for i, b := range data[1:] {
		g = (g<<1 | g>>31) ^ table[b]
		h[i] = g
	}
	return len(data) - 1
}
